{"body":"Livro de Receitas Aljava \r\n=====\r\n\r\nAljava é um framework Java desenvolvido para o ensino de Orientação a Obejtos tendo como foco o desenvolvimento de jogos.\r\nO Framework também pode ser usado como uma biblioteca de classes úteis que dentre outras coisas realizam o desenho de formas geométricas, imagens, execução de sons e colisões envolvendo Retângulos.\r\n\r\nO framework pode ser dividido nas seguintes seções\r\n\r\n* **Desenho, Tela e Utilitáros**: Métodos usados para desenhar formas geométricas utilizando diversas cores, recursos de transparência e colisão, além de métodos para recuperar textos e números informados pelos usuários. Outros métodos utilitários como um sorteador de números também estão disponíveis; \r\n* **Mídia**: Classes para desenho de imagens, animações e execução de sons;\r\n* **Elementos de Jogo**: Classes para construção de cenários, realização de colisão, tratamento de gravidade;\r\n* **Framework**: Uso das quatro classes responsáveis por transformar o Aljava em um mini Framework para o desenvolvimento de jogos.\r\n\r\n## Início\r\n\r\nEsta seção descreve questões iniciais básicas para o uso do Aljava nos seus projetos.\r\n\r\n### Instalação\r\n\r\nBasta adicionar ao seu projeto o arquivo **Aljava.jar** que está disponível [aqui](https://github.com/kaleucaminha/aljava/blob/master/Aljava.jar). Ele tem tudo que é necessário.\r\n\r\n### Execução\r\n\r\nPara iniciar com a classe Alj basta importá-la e executar alguns dos seus comandos. Ao importar a classe uma janela de 400x400 é criada para o jogo, todos os comandos são baseados nesta janela.\r\n\r\n```java\r\nimport aljava.Alj;\r\n```\r\n\r\nSegue abaixo alguns exemplos de comandos disponíveis na classe Alj.\r\n\r\n```java\r\nAlj.desenha.retangulo(0, 0, 400, 400);\r\n\r\nAlj.cor.nome(\"verde\");\r\nAlj.desenha.texto(20, 200, \"Aljava - Programação é massa.\", 16);\r\n\r\nAlj.tela.exibe();\r\n```\r\n\r\n**Obs:** Para que um desenho efetivamente seja exibido na tela, o método __Alj.tela.exibe()__ deve ser executado.\r\n\r\nAlém dos comandos da classe \"Alj\" existem diversas outras classes que podem ser utilizadas conforme documentado nas seções abaixo.\r\n\r\n### IDE - Ambiente de Programação\r\n\r\nA lib Aljava está em um JAR. Você pode incluí-lo em seu projeto e começar a usá-lo livremente. Qualquer ambiente de programação (Netbeans, Eclipse, JCreator, etc) pode ser utilizado. Para fins didáticos, recomenda-se o BlueJ.\r\n\r\nNo BlueJ, eventualmente ocorre um erro ao tentar exibir uma janela em função de erros de acesso ao contexto gráfico. Para evitá-los, basta resetar a máquina virtual sempre antes de executar um código novamente.\r\n\r\n## Desenho, Tela e Utilitáros\r\n\r\nToda esta seção está disponível através de comandos acessados a partir da classe \"Alj\". Os comandos estão divididos em grupos conforme descrição abaixo:\r\n\r\n**desenho**: Desenho de formas geométricas básicas (retângulos, triângulos, ovais, linhas e polígonos). Também é possível desenhar textos com tamanhos de fonte variados;\r\n**cor**: comandos que alteram a cor que está sendo utilizada para o desenho. A cor pode ser alterada usando valores hexadecimais, RGB ou mesmo através de algumas Strings padronizadas. Também é possível informar o nível de transparência de uma cor;\r\n**transforma**: Comandos que permitem o uso de rotações nas imagens desenhadas;\r\n**tela**: Comandos para solicitar informações ao usuário e demais operações ligadas a janela principal do jogo;\r\n**mouse**: Métodos de acesso ao mouse;\r\n**tecla**: Métodos de acesso ao teclado;\r\n**util**: comandos utilitários como o sorteio de números aleatórios.\r\n\r\n### Desenho\r\n\r\nTodos os métodos de desenho utilizam a cor que foi definida. Inicialmente a cor definida é preto, para alterá-la, veja a seção \"Cores\".\r\n\r\n#### Linhas\r\nUma linha representa a ligação entre dois pontos. \r\nOs parâmetros são o x, y do ponto inicial e o x, y do ponto final.\r\n\r\n```java\r\n//assinatura do método\r\nAlj.desenha.linha(int x, int y, int xFinal, int yFinal);\r\n\r\n//Linha diagonal na tela\r\nAlj.desenha.linha(0, 0, 400, 400);\r\n\r\n//Linha horizontal no meio da tela\r\nAlj.desenha.linha(0, 400, 200, 200);\r\n```\r\n\r\n#### Retângulos\r\nUm retângulo inicia com o canto superior esquerdo em uma coordenada x, y e possui uma largura e uma altura.\r\n\r\n```java\r\n//assinatura do método\r\nAlj.desenha.retangulo(int x, int y, int largura, int altura);\r\n\r\n//Um retângulo de 300 de largura por 100 de altura no ponto 20, 20\r\nAlj.desenha.retangulo(20, 20, 300, 100);\r\n```\r\n\r\n#### Borda dos Retângulos\r\nTambém é possível desenhar somente o contorno da borda do retângulo. Os parâmetros são os mesmos.\r\n\r\n```java\r\n//assinatura do método\r\nAlj.desenha.retanguloBorda(int x, int y, int largura, int altura);\r\n\r\n//Um retângulo de 300 de largura por 100 de altura no ponto 20, 20\r\nAlj.desenha.retanguloBorda(20, 20, 300, 100);\r\n```\r\n\r\n#### Oval\r\nUma oval inicia com o canto superior esquerdo em uma coordenada x, y e possui uma largura e uma altura.\r\n\r\n```java\r\n//assinatura do método\r\nAlj.desenha.oval(int x, int y, int largura, int altura);\r\n\r\n//Uma oval de 300 de largura por 100 de altura no ponto 20, 20\r\nAlj.desenha.oval(20, 20, 300, 100);\r\n```\r\n\r\n#### Triangulo\r\nUma triângulo inicia com o canto superior esquerdo em uma coordenada x, y e possui uma largura e uma altura. Este triângulo sempre tem a ponta para cima. Para construir triângulos de lado ou para baixo, use-o em conjunto com o comando Alj.transforma.rotaciona( ... ) apresentado na seção \"Transformações\".\r\n\r\n```java\r\n//assinatura do método\r\nAlj.desenha.trinagulo(int x, int y, int largura, int altura);\r\n\r\n//Uma triângulo de 300 de largura por 100 de altura no ponto 20, 20\r\nAlj.desenha.triangulo(20, 20, 300, 100);\r\n```\r\n\r\n#### Polígonos\r\nVocê pode desenhar qualquer forma geométrica usando polígonos.\r\nPolígonos são sequencias de pontos. Para desenhar um polígono, basta passar um array de pontos x e um array de pontos y.\r\n\r\n```java\r\n//Assinatura do método\r\n//Alj.desenha.poligono(int x[], int y[]);\r\n\r\nint xs[] = {100, 200, 300, 150, 100};\r\nint ys[] = {100, 100, 200, 150, 100};\r\nAlj.desenha.poligono(xs, ys);\r\n```\r\n\r\nAlternativamente, você pode usar um objeto da classe Polygon.\r\n\r\n```java\r\n//não esqueça de importar a classe Polygon para usá-la\r\n//Ex: import java.awt.Polygon;\r\n\r\nPolygon pol = new Polygon();\r\npol.addPoint(100, 100);\r\npol.addPoint(400, 350);\r\npol.addPoint(200, 150);\r\npol.addPoint(100, 100);\r\nAlj.desenha.poligono(pol);\r\n```\r\n\r\n#### Textos\r\n\r\nTextos podem ser desenhados em qualquer posição X, Y da tela. Alternativamente, você pode informar um quarto parâmetro para o tamanho da fonte. Não é possível mudar a fonte dos textos e a quebra de linha também não é feita pelo método.\r\n\r\n```java\r\n//Assinatura do método \r\nAlj.desenha.texto(int x, int y, String texto);\r\n//ou\r\nAlj.desenha.texto(int x, int y, String texto, int tamanhoFonte);\r\n\r\nAlj.desenha.texto(20, 200, \"Aljava - Programação que vale o esforço.\", 16);\r\n```\r\n\r\n### Cores\r\n\r\nTodos os desenhos acima podem receber transparência ou uma cor. Você pode mudar a cor de diversas formas, escolha a que preferir.\r\n\r\n#### Mudar cor pelo nome\r\nExistem alguns nomes de cores pré-definidos que podem ser usados como uma String. Isso é útil no início do aprendizado de programação, principalmente para os primeiros exercícios.\r\n\r\n```java\r\n//Assinatura do método\r\nAlj.cor.nome(String nomeCor);\r\n\r\n//Usando a cor vermelha\r\nAlj.cor.nome(\"vermelho\");\r\n```\r\n\r\nAs cores disponíveis são: \"vermelho\", \"laranja\", \"ciano\", \"preto\", \"azul\", \"amarelo\", \"verde\", \"magenta\" e \"branco\".\r\n\r\n#### Mudar cor pelo RGB\r\nUma cor é formada por uma quantidade de vermelho (R), verde (G) e azul (B). Estes valores variam de 0 (mais escuro) até 255 (mais claro). Este comando tem três parâmetros, um para cada das três cores e é o mais útil para criar pequenas animações com cores.\r\n\r\n```java\r\n//Assinatura do método\r\nAlj.cor.rgb(int r, int g, int b)\r\n\r\n//Inforando uma cor com alta quantidade de vermelho\r\nAlj.cor.rgb(200, 100, 10);\r\n```\r\n\r\n#### Hexadecimal #006699\r\nDesenvolvedores que tenham conhecimento de web e estejam acostumados com o formato hexadecimal, podem usá-lo também. Qualquer cor hexadecimal pode ser informada como uma String.\r\n\r\n```java\r\n//Assinatura do método\r\nAlj.cor.hexadecimal(String hexadecimal);\r\n\r\n//Exemplo de uma cor tendendo para o verde\r\nAlj.cor.hexadecimal(\"#336699\");\r\n```\r\n\r\n#### Objeto Color\r\nDesenvolvedores mais avançados podem usar um objeto da classe Color do Java.\r\n\r\n```java\r\n//Assinatura do método\r\nAlj.cor.objeto(Color cor);\r\n\r\n//Exemplo da mesma cor informada pelo formato RGB\r\nAlj.cor.objeto( new Color(200,100,10) );\r\n```\r\n\r\n#### Alterar a transparência\r\nOutro recurso útil é o uso de transparências. Você pode informar a transparência com uma porcentagem que varia de 0 até 100. Quanto maior o valor, maior a transparência.\r\n\r\n```java\r\n//Assinatura do método\r\nAlj.cor.transparencia(int porcentagem);\r\n\r\n//Exemplo de 50% de transparência\r\nAlj.cor.transparencia(50);\r\n```\r\n\r\n### Transformação\r\n\r\nO objetivo deste grupo de comandos e poder realizar transformações como escala e rotação nos desenhos, por hora, somente rotação está disponível.\r\n\r\n#### Rotação\r\nA rotação é sempre aplicada diretamente ao ambiente de desenho. Desse modo, é sempre importante informar qual o eixo x, y que será utilizado para a rotação.\r\n\r\n```java\r\n//Assinatura do método\r\nAlj.transforma.rotaciona(int angulo, int xCentra, int yCentral);\r\n```\r\n\r\nSe você quiser uma determinada forma geométrica seja rotacionada, precisará rotacionar a tela usando como eixo o centro da figura, e, após o desenho, limpar a rotação para que ela não afete os próximos desenhos.\r\n\r\nExemplo de um losango (Quadrado rotacionado em 90 graus).\r\n\r\n```java\r\n//Define x e y da posição central da rotação\r\nint xCentral = x + (largura / 2);\r\nint yCentral = y + (altura / 2);\r\n\r\n//Executa Rotação\r\nAlj.transforma.rotaciona(90, xCentral, yCentral);\r\n//Faz o desenho\r\nAlj.desenha.retangulo(x, y, largura, altura);\r\n//Limpa a rotação para que os próximos desenhos não sejam afetados.\r\nAlj.transforma.limpaRotacao();\r\n```\r\n\r\n### Tela\r\nA Aljava é sempre baseada em uma tela. Os comandos deste pacote ajudam a trabalhar com ela e com entrada de dados que devem vir do usuário através de janelas pop-up.\r\n\r\n#### Exibir a Tela\r\nTodos os desenhos só serão exibidos na tela após a execução deste método. Antes disso, ficam em um buffer de desenho escondido. Isso evita que a tela fique \"piscando\".\r\n\r\n```java\r\n//Lembre-se de sempre executar este método após desenhar qualquer coisa (que você queira ver na tela).\r\nAlj.tela.exibe();\r\n```\r\n\r\n#### Limpar\r\nAntes de iniciar o desenho de um novo frame da sua aplicação, você pode querer limpar a tela. Basicamente limpar a tela é desenhar um retângulo branco por cima de tudo. Este método é um atalho para isso.\r\n\r\n```java\r\nAlj.tela.limpar();\r\n```\r\n\r\n#### Alterar o tamanho\r\nA tela tem por padrão 400 pixels de largura por 400 de altura. Para alterar este tamanho, use:\r\n\r\n```java\r\n//Alj.inicializa(int largura, int altura)\r\nAlj.inicializa(800, 600);\r\n```\r\n\r\n__OBS__: Este método não usa o grupo \"tela\" na assinatura pois a intenção é no futuro transformá-lo em um inicializador da janela.  \r\n\r\n#### Finalizar\r\nPara encerrar o programa e fechar a janela, execute:\r\n\r\n```java\r\nAlj.tela.finalizar();\r\n```\r\n\r\n#### Exibir Mensagem\r\nFrequentemente é útil exibir mensagens ao usuário como \"Parabéns, você venceu.\". Para isto, use:\r\n\r\n```java\r\nAlj.tela.exibeMensagem(\"Parabéns, você venceu.\\n\\nTente novamente.\")\r\n```\r\n\r\n**Obs:** use \\n para quebra de linha na janela.\r\n\r\n#### Solicitar Texto ao usuário\r\nVocê também pode solicitar que o usuário lhe informe um texto qualquer, como por exemplo, o seu nome.\r\n\r\n```java\r\nString nome = Alj.tela.solicitaTexto(\"Por favor, informe seu nome.\");\r\n```\r\n\r\n#### Solicitar Números ao usuário\r\nVocê também pode solicitar que o usuário lhe informe um número qualquer, como por exemplo, para um par ou ímpar.\r\n\r\n```java\r\nint numero = Alj.tela.solicitaNumero(\"1, 2, 3 e já...\");\r\n```\r\n\r\nAlternativamente, você pode solicitar um double\r\n\r\n```java\r\ndouble numero = Alj.tela.solicitaNumeroDouble(\"Informe o preço do produto:\");\r\n```\r\n\r\n### Mouse\r\n\r\nO mouse é um dos recursos que possibilitam maior interação com o usuário.\r\nSempre que necessário você pode pegar a posicão x, y do mouse com os métodos:\r\n\r\n```java\r\nint x = Alj.mouse.x();\r\nint y = Alj.mouse.y();\r\n```\r\n\r\nE pode ver também se um dos três botões do mouse foram pressionados\r\n\r\n```java\r\nif( Alj.mouse.clickE() ){\r\n    Alj.tela.exibeMensagem(\"Você pressionou o botão esquerdo\");\r\n}\r\n\r\nif( Alj.mouse.clickM() ){\r\n\tAlj.tela.exibeMensagem(\"Você pressionou o botão do meio\");\r\n}\r\n\r\nif( Alj.mouse.clickD() ){\r\n\tAlj.tela.exibeMensagem(\"Você pressionou o botão direito\");\r\n}\r\n```\r\n\r\n### Teclado\r\n\r\nPor enquanto a Aljava só permite saber se em um dado momento, uma tecla está ou não pressionada.\r\n\r\n```java\r\nif( Alj.tecla.press(\"esquerda\") ){\r\n\tmoveHorizontal(-10);\r\n}\r\n\t\r\nif( Alj.tecla.press(\"direita\") ){\r\n\tmoveHorizontal(+10);\r\n}\r\n\r\nif( Alj.tecla.press(\"cima\") ){\r\n\tmoveVertical(-10);\r\n}\r\n\t\r\nif( Alj.tecla.press(\"baixo\") ){\r\n\tmoveVertical(+10);\r\n}\r\n```\r\n\r\nAs teclas disponíveis com String são: \"enter\", \"espaco\", \"esquerda\", \"direita\", \"cima\",\"baixo\", todas as letras de \"a\" até \"z\", todos os números de 0 até 9 e todos os números do \"NUMPAD\" através das Strings \"NUMPAD0\", \"NUMPAD2\", etc.\r\n\r\nAlternativamente, você pode usar o código da tecla com as constantes da classe KeyEvent do Java.\r\n\r\n```java\r\nif( Alj.tecla.press( KeyEvent.VK_TAB ) ){\r\n\texecutaEspecial();\r\n}\r\n\r\n```\r\n\r\n### Utilitários\r\n\r\nNeste grupo estão alguns comandos utilitários que não se encaixam em nenhum dos grupos anteriores.\r\n\r\n#### Espera\r\n\r\nEm jogos, é muito comum precisarmos pedir para o computador esperar alguns instantes antes de executar uma ação ou partir para o frame seguinte do jogo. Podemos fazer isso, esperando alguns milisegundos com:\r\n\r\n```java\r\nAlj.util.espera(500);\r\n```\r\n\r\n#### Números aleatórios\r\n\r\nVocê pode sortear um número entre um mínimo e um máximo. \r\n\r\n```java\r\nint num = Alj.util.sorteia(1, 10);\r\n```\r\n\r\nAlternativamente, você pode sortear um double passando valores double como parâmetros\r\n\r\n```java\r\ndouble num = Alj.util.sorteia(1.5, 3.5);\r\n```\r\n\r\n## Exemplos Completos\r\n\r\nEncerramos o detalhamento dos comandos com os utilitários. Agora, seguem alguns exemplos utilizando comandos de diferentes pacotes. \r\n\r\n### Cores + Desenho\r\n\r\n```java\r\n\t//Cria uma variável para o valor da trasnparência. \r\n    //Inicialmente os desenhos começarão transparentes\r\n    int transparencia = 100;\r\n    \r\n    //Inicia loop que irá desenhar as formas geométricas uma vez para cda valor inteiro entre 100 e 0.\r\n    while(transparencia > 0){\r\n      transparencia -= 1;\r\n\r\n      //Limpa telae e configura cor laranja\r\n      Alj.tela.limpa();\r\n      Alj.cor.rgb(255, 200, 100);\r\n\r\n      //Desenha um texto informando o valor da transparência com uma linha abaixo para dar um estilo visual agradável. Este texto deve estar sempre exibido, portanto, sua transparência é 0\r\n      Alj.cor.transparencia(0);\r\n      Alj.desenha.texto(10, 28, \"Transparência: \"+transparencia, 20);\r\n      Alj.desenha.linha(10, 42, 290, 42);\r\n\r\n      //Desenha as três formas geométricas mais básicas com o valor da transparência conforme a variável \"transparência\"\r\n      Alj.cor.transparencia(transparencia);\r\n      Alj.desenha.retangulo(20, 170, 40, 40);\r\n      Alj.desenha.oval(200, 60, 40, 40);\r\n      Alj.desenha.triangulo(100, 120, 40, 40);\r\n\r\n\t  //Desenha um polígono usando 5 pontos\r\n      //Coordenadas x e y do polígono, Ex: 100,100 -> 200, 100 -> 300, 200, etc...\r\n      int xs[] = {100, 200, 300, 150, 100};\r\n      int ys[] = {100, 100, 200, 150, 100};\r\n      Alj.desenha.poligono(xs, ys);\r\n      \r\n      //Exibe os desenhos\r\n      Alj.tela.exibe(); \r\n      //Faz uma pausa para demosntrar o efeito da animação\r\n      Alj.util.espera(50);\r\n    }       \r\n```\r\n\r\n### Mini Paint\r\n\r\n```java\r\nwhile(true){      \r\n        int xMouse = Alj.mouse.x();\r\n        int yMouse = Alj.mouse.y();\r\n\r\n\t\t//Sempre desenha um pequeno círculo na posição do mouse\r\n        Alj.desenha.oval(xMouse - 1, yMouse - 1, 2, 2);\r\n\r\n\t\t//Se o botão esquerdo estiver pressionado,\r\n        //desenha um círculo vermelho maior\r\n        if (Alj.mouse.clickE()) {\r\n            Alj.cor.rgb(255, 0, 0);\r\n            Alj.desenha.oval(xMouse - 10, yMouse - 10, 20, 20);\r\n        }\r\n\r\n\t\t//Se o botão do meio estiver pressionado\r\n        //desenha um círculo verde maior\r\n        if (Alj.mouse.clickM()) {\r\n            Alj.cor.rgb(0, 255, 0);\r\n            Alj.desenha.oval(xMouse - 10, yMouse - 10, 20, 20);\r\n        }\r\n\r\n\t\t//Se o botão do direito estiver pressionado\r\n        //desenha um círculo azul maior\r\n        if (Alj.mouse.clickD()) {\r\n            Alj.cor.rgb(0, 0, 255);\r\n            Alj.desenha.oval(xMouse - 10, yMouse - 10, 20, 20);\r\n        }\r\n      \r\n        Alj.tela.exibe();   \r\n}  \r\n```\r\n\r\n### Teclado e Tela\r\n\r\n```java\r\nAlj.tela.exibeMensagem(\"Olá. Pressione Enter para mudar a largura e altura da janela.\");\r\n//Inicializa uma janela com a largura e altura padrão    \r\nint largura = 740;\r\nint altura = 180;\r\nString textoQualquer = \"Aqui vai um texto que você informar\";  \r\nAlj.inicializa(largura, altura);\r\n//Entra no loop para esperar o usuário pressionar enter\r\nwhile(true){            \r\n      Alj.tela.limpa();  \r\n      //Quando o enter for pressionado, pega uma nova largura, uma nova altura e o texto a ser exibido\r\n      if(Alj.tecla.press(\"enter\")){\r\n        largura = Alj.tela.solicitaNumero(\"Informe a largura:\");\r\n        altura = Alj.tela.solicitaNumero(\"Informe a altura:\");\r\n        textoQualquer = Alj.tela.solicitaTexto(\"Ïnforme um texto qualquer:\");\r\n        //e re-inicializa a janela com a altura especificada\r\n        Alj.inicializa(largura, altura);\r\n      }\r\n      \r\n\t  //Desenha a largura e a altura da janela\r\n      String tamanhoTela = largura+\" x \"+altura;\r\n      Alj.desenha.texto(20, 60, tamanhoTela, 40);\r\n      //Desenha o texto informado\r\n      Alj.desenha.texto(20, 100, textoQualquer, 40);\r\n\r\n      //Exibe\r\n      Alj.tela.exibe();\r\n      Alj.util.espera(50);\r\n    } \r\n```\r\n\r\n## Mídia\r\n\r\nPor hora, podem ser usadas mídias para imagens e sons. Cada arquivo de mídia é representado por um objeto de uma classe. Todos os arquivos utilizados devem estar na pasta raiz do projeto.\r\n\r\nImporte as classes desta seção usando \"import aljava.midia.*\".\r\n\r\n### Imagem\r\n\r\nUma imagem representa um arquivo que pode estar nos formatos \"png\", \"jpg\" ou \"gif\". \r\nUma imagem possui métodos para desenhá-la, alterar largura, altura ou invertê-la. \r\n\r\n```java\r\nImagem img;\r\n//...\r\nimg = new Imagem(\"pasta/nomeimagem.jpg\");\r\n\r\n//Método para desenhar a imagem em uma posição na tela\r\n//img.desenha(int x, int y);\r\nimg.desenha(20, 20); \r\n\r\n//Métodos de acesso à largura e altura da imagem\r\nint largura = img.pegaLargura();\r\nint altura = img.pegaAltura();\r\n\r\n//Métodos que modificam a largura e altura\r\nimg.alteraLargura( 1 ); //Aumenta em 1 pixel a largura da imagem\r\nimg.alteraAltura( -1 ); //Diminui em um pixel a altura da imagem\r\n\r\n//img.alteraTamanho(int novaLargura, int nova Altura)\r\nimg.alteraTamanho(48, 48); //Redimensiona a imagem para os valores especificados\r\n\r\n//Inverte a imagem\r\nimg.inverte();\r\n```\r\n\r\n### Gif\r\n\r\nUm objeto da classe Gif é uma extensão da classe Imagem e tem como única finalidade permitir que um objeto Gif pare de ser desenhado após certo período de tempo. Este recurso é útil por exemplo, em Gif's de explosões que devem parar de ser exibidos após alguns milissegundos.\r\n\r\n```java\r\n//new Gif(String caminhoImagem, int tempoParaSumirEmMilissegundos);\r\nGif explosao = new Gif(\"explosao.gif\", 2000);\r\n\r\n//Além dos métodos de imagem, há um método disponível para saber se o tempo já terminou\r\nif( explosao.temrinou() ){\r\n   //faz alguma coisa..\r\n}\r\n\r\n//Outro método útil é o reinicia, que permite reiniciar o contador de tempo do Gif\r\nexplosao.reinicia();\r\n```\r\n\r\n### Animação\r\n\r\nUma animação corresponde a um conjunto de imagens, cada qual representando um quadro, sendo exibidas uma após a outra com um certo intervalo de tempo. Por ser uma coleção de imagens, estão disponíveis alguns métodos que alteram todas as imagens da animação.\r\n\r\n```java\r\n//Cria um objeto da classe Animação informando o tempo em milissegundos de intervalo entre as imagens\r\n Animacao animacao = new Animacao(200);\r\n //Adiciona diferentes imagens para a animação\r\n animacao.addImagem(\"imagens/ryu/chute.png\");\r\n animacao.addImagem(\"imagens/ryu/chute2.png\");\r\n animacao.addImagem(\"imagens/ryu/chute.png\");\r\n animacao.addImagem(\"imagens/ryu/soco_direita.png\");\r\n animacao.addImagem(\"imagens/ryu/soco_esquerda.png\");\r\n animacao.addImagem(\"imagens/ryu/haduken.png\");\r\n //Inicia execução da animação em loop, ou seja, quando chegar ao final, recomeça\r\n //Uma forma alternativa é usar o método inicia() apenas.\r\n animacao.iniciaEmLoop();\r\n    \r\n //Para demonstrar os demais recursos fazemos um loop que altera a animação conforme as teclas digitadas pelo usuário   \r\n while(true){ \r\n      Alj.tela.limpa();\r\n\r\n      if( Alj.tecla.press(\"esquerda\") ){\r\n        //Diminui em 10 pixels a largura de todas as imagens da animação\r\n        animacao.alteraLargura(-10);\r\n      }\r\n\r\n      if( Alj.tecla.press(\"direita\") ){\r\n        //Aumenta em 10 pixels a largura de todas as imagens da animação\r\n        animacao.alteraLargura(10);\r\n      }\r\n\r\n      if( Alj.tecla.press(\"cima\") ){\r\n      \t//Aumenta em 10 pixels a altura de todas as imagens da animação\r\n        animacao.alteraAltura(10);\r\n      }\r\n            \r\n      if( Alj.tecla.press(\"baixo\") ){\r\n      \t//Diminui em 10 pixels a altura de todas as imagens da animação\r\n        animacao.alteraAltura(-10);\r\n      }\r\n\r\n      if( Alj.tecla.press(\"espaco\") ){\r\n      \t//Inverte todas as imagens da animação\r\n        animacao.inverte();\r\n      }\r\n      //Processa a animação para realizar a troca do quadro\r\n      animacao.processa();\r\n      //Desenha a imagem atual da animação no ponto 50, 50 da tela\r\n      animacao.desenha(50, 50);\r\n\r\n      Alj.tela.exibe();\r\n    }\r\n```\r\n\r\n\r\n### Sons\r\n\r\nUm som pode ser executado, parado, reiniciado e executado em loop. Somente estão disponíveis sons no formato Wav. Segue abaixo exemplo de como controlar uma música via comandos do teclado.\r\n\r\n```java\r\n//Cria objeto que representa uma música\r\nSom musica = new Som(\"recursos/aljava.exemplos.som/mario.wav\");\r\nwhile(true){\r\n\tAlj.tela.limpa();\r\n    \r\n\tAlj.desenha.texto(20, 20, \"Pressione t -> Toca a Musica\");\r\n\tif(Alj.tecla.press(\"t\")){\r\n\t   musica.toca();\r\n       //se preferir, inicie em loop\r\n       //musica.loop();\r\n\t}\r\n\r\n\tAlj.desenha.texto(20, 40, \"Pressione p -> Pausa a Musica\");\r\n\tif(Alj.tecla.press(\"p\")) {\r\n\t\tmusica.pausa();\r\n\t}\r\n\r\n\tAlj.desenha.texto(20, 60, \"Pressione r -> Reinicia a Musica\");\r\n\tif(Alj.tecla.press(\"r\")) {\r\n\t\tmusica.reinicia();\r\n\t}\r\n\r\n\tAlj.tela.exibe();\r\n}\r\n```\r\nOutro uso é como sons de notas musicais para simular um violão ou guitarra por exemplo.\r\nNeste exemplo, para cada tecla digitada um objeto som é criado e executado, assim, uma mesma tecla pode ser pressionada várias vezes para criar diversos objetos do mesmo som.\r\n\r\nVariáveis booleanas são utilizadas para garantir que a tecla só pode ser pressionada novamente após ser solta.\r\n\r\n```java\r\n         while(true){\r\n            Alj.tela.limpa();\r\n\r\n            //Tecla Ré\r\n            Alj.desenha.texto(20, 40, \"Pressione s -> Ré\");\r\n            if(Alj.tecla.press(\"s\") && sLiberado){\r\n                sLiberado = false;\r\n                Som som = new Som(\"recursos/aljava.exemplos.som/re_piano.wav\");\r\n                som.toca();\r\n            }\r\n\r\n            if(!Alj.tecla.press(\"s\")) {\r\n                sLiberado = true;\r\n            }\r\n\r\n            //Tecla Ré\r\n            Alj.desenha.texto(20, 60, \"Pressione d -> Fá\");\r\n            if(Alj.tecla.press(\"d\") && dLiberado){\r\n                dLiberado = false;\r\n                Som som = new Som(\"recursos/aljava.exemplos.som/fa_piano.wav\");\r\n                som.toca();\r\n            }\r\n\r\n            if(!Alj.tecla.press(\"d\")) {\r\n                dLiberado = true;\r\n            }\r\n\r\n           \r\n            Alj.tela.exibe();\r\n        }\r\n```\r\n\r\n## Elementos de Jogo\r\n\r\nAs classes desta seção apresentam elementos importantes para o desenvolvimento de jogos, como colisões e cenários.\r\n\r\nSão apresentados aqui somente os métodos mais importantes. Para mais métodos, verifique o JavaDoc.\r\n\r\nImporte as classes desta seção usando **import aljava.jogo.\\***.\r\n\r\n\r\n### Retangulo\r\n\r\nA Classe Retangulo é a classe base da maioria dos objetos e contém quatro variáveis (x, y, largura e altura). Ela possui métodos de acesso e modificadores para cada uma das 4 variáveis, métodos para movimentar o X e o Y e métodos para colisão. Geralmente você usará esta classe como superclasse de outras\r\n\r\n```java\r\npublic class MeuObjeto extends Retangulo {\r\n\t//Código da classe aqui\r\n}\r\n\r\n//Ao usar o seu objeto, os seguintes métodos da classe Retangulo estarão disponíveis\r\n//Você pode criar objetos da classe Retangulo por um construtor vazio ou com quatro parâmetros, um para cada uma das variáveis\r\n//MeuObjeto obj = new MeuObjeto(x, y, largura, altura);\r\nMeuObjeto obj = new MeuObjeto();\r\n\r\n//Métodos de acesso\r\nint x = obj.pegaX();\r\nint y = obj.pegaY();\r\nint largura = obj.pegaLargura();\r\nint altura = obj.pegaAltura();\r\n\r\n//Métodos modificadores\r\nobj.alteraX( 30 );\r\nobj.alteraY( 30 );\r\nobj.alteraLargura( 48 );\r\nobj.alteraAltura( 48 );\r\n```\r\n\r\nAbaixo, métodos que podem ser usados para movimentar e verificar colisões\r\n\r\n```java\r\n//Movimento do X e do Y\r\nif( Alj.tecla.press(\"esquerda\") ){\r\n\tobj.moveX(-10); //Move o x dez pixels para a esquerda\r\n}\r\n\r\nif( Alj.tecla.press(\"baixo\") ){\r\n\tobj.moveY(10); //Move o y dez pixels para baixo.\r\n}\r\n\r\n//Colisão.\r\n\r\n//Com outro objeto que também seja um retangulo\r\nif(obj.toca( outroObjetoRetangulo )){\r\n\t//faz alguma coisa\r\n}\r\n\r\n//Com um determinado ponto, por exemplo, o X, Y do mouse\r\nint xMouse = Alj.mouse.x();\r\nint yMouse = Alj.mouse.y();\r\nif(obj.toca(xMouse, yMouse)){\r\n\t//Faz alguma coisa\r\n}\r\n \r\n```\r\n\r\n### RetanguloGravidade\r\n\r\nEsta classe estende a classe Retangulo e adiciona métodos para processar a gravidade e realizar pulos.\r\n\r\n```java\r\npublic class MeuObjeto extends RetanguloGravidade { /*...*/ }\r\n//...\r\nMeuObjeto obj = new MeuObjeto();\r\nwhile(true){\r\n\t//processa gravidade\r\n    obj.processa();\r\n    //Pula ao pressionar espaço\r\n    if(Alj.tecla.press(\"espaco\")){\r\n    \t//O 15 é a força do pulo\r\n    \tobj.pula(15);\r\n    }\r\n}\r\n```\r\n\r\nPara que a gravidade funciona são necessários o valor do chão e o próprio valor da gravidade. Estes valores podem ser alterados via variáveis públicas estáticas.\r\n\r\n```java\r\n//O padrão para o chão é 400\r\nRetanguloGravidade.CHAO = 380;\r\n//O padrão da gravidade é 1\r\nRetanguloGravidade.GRAVIDADE = 0.7;\r\n```\r\n\r\n### CenaComColisao\r\n\r\nUma CenaComColisao é uma extensão da classe Cena. A classe CenaComColisao se diferencia apenas por acrescentar colisão, porém, como verificou-se que nenhum dos projetos em sala utilizava somente a classe Cena, somente está documentada a classe CenaComColisao.\r\n\r\nUma CenaComColisao consiste em um conjunto de \"tiles\" (pequenos quadrados representados por imagens) desenhados a partir de um arquivo de configuração e que podem ser sólidos ou não.\r\n\r\nObjetos do tipo Retangulo podem ser adicionados ao Cenário e movimentados com ele.\r\n\r\nSegue abaixo exemplo de um arquivo de configuração de uma cena:\r\n\r\nArquivo __cena.txt__\r\n```java\r\n2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2\r\n2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,2\r\n1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,1,1,1,1,2,2,2,1,1\r\n1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,2,2,1,1,1,1,1,2,2,2,2,1,2,2,2,1,1,1,1\r\n1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2\r\n1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2\r\n1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1\r\n1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,2,2,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1\r\n1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,2,1,1,2,2,3,2,2,2,1,1,1,1,2,2,2,2,2\r\n1,1,1,1,1,2,2,2,2,1,1,1,1,2,1,1,1,1,1,1,1,2,2,2,2,3,3,3,2,1,1,2,2,2,2,2,2,2\r\n2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,2,2,2,2,2,2,2\r\n2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2\r\n2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2\r\n```\r\n\r\nPara desenhar este cenário é usado o seguinte código:\r\n\r\n```java\r\nCenaComColisao cena1;\r\n//...\r\ncena1 = new CenaComColisao(\"cena.txt\");\r\n//Configura que todos os números 1 usarão a imagem terra.png\r\ncena1.configTile(1, \"terra.png\");\r\n//Configura imagem do número 2 informando o terceiro parâmetro como verdadeiro, isso significa que este bloco é sólido\r\ncena1.configTile(2, \"fundo.jpg\", true);\r\n//Faz uma parede fantasma usando a mesma imagem do bloco sólido, porém, sem solidez\r\ncena1.configTile(3, \"fundo.jpg\");\r\n//Configura o tamanho de cada Tile.\r\ncena1.tamanhoTiles(32, 32);\r\n```\r\n\r\nAlém disso podemos adicionar objetos que realizam colisão com os tiles do cenário e objetos que são movimentados junto do cenário, ou seja, se o cenário se mover para a esquerda os objetos se movem junto, executando o efeito dos objetos estarem realmente dentro do cenário. As duas operações são diferentes e são feitas com os seguintes métodos.\r\n\r\n```java\r\n//Adiciona objetos para realizar colisão com o cenário\r\ncena1.adicionaObjeto(jogador);\r\ncena1.adicionaObjeto(inimigo1);\r\ncena1.adicionaObjeto(inimigo2);\r\n\r\n//Adiciona objetos que se movimentarão junto do cenário\r\n//O jogador não é incluído porque ele deve ficar fixo na tela e quem se move na verdad eé o cenário. Esta tarefa é feita pela classe camera.\r\ncena1.moveComCenario(inimigo1);\r\ncena1.moveComCenario(inimigo2);         \r\n```\r\n\r\n__Obs__: Todos os objetos adicionados devem ser do tipo Retangulo.\r\n\r\nPor fim, no loop do jogo, o cenário deve ser processado para realizar os cálculos de colisão e movimento dos objetos.\r\n\r\n```java\r\n...\r\ncena1.processa();\r\ncena1.desenha();\r\n...\r\n```\r\n\r\n### Camera\r\n\r\nA classe Camera implementa a lógica de, a partir do movimento de um determinado retangulo, movimentar o cenário para ter a sensação de que existe uma câmera acompanhando o objeto.\r\n\r\nPara usá-la, basta informar um objeto da classe Cena e outro da Classe Retangulo.\r\n\r\n```java\r\nCamera cam = new Camera(cena1, jogador);\r\n```\r\n\r\nPara que os cálculos de acompanhamento da câmera sejam realizados, basta executar o método \"processa\".\r\n\r\n```java\r\n...\r\ncam.processa();\r\n...\r\n```\r\n\r\n## Framework\r\n\r\nAs classes desta seção devem usadas em conjunto para construir uma arquitetura escalável de jogo, com diversas fases e objetos.\r\n\r\nImporte as classes desta seção usando **import aljava.jogo.\\***.\r\n\r\n### Motor\r\n\r\nA classe motor gera objetos que controlam o fluxo principal do jogo e realizam a troca de fases. \r\n\r\n#### MotorSingleton\r\n\r\nPor jogo, é ideal que só exista um objeto da classe motor disponível. Para isso, esta classe implementa o padrão singleton, que garante apenas um único objeto disponível para toda a aplicação. De qualquer local do código o motor do jogo pode ser recuperado através de:\r\n\r\n```java\r\nMotor motor = MotorSingleton.pegaInstancia();\r\n```\r\n\r\n#### Adicionando fases\r\nPara incluir fases no motor basta usar o método \"adicionaFase\" informando a chave e o correspondente objeto que implementa a interface Fase.\r\n\r\n```java\r\n\t\t//Cria objetos de classes que implementam a interface Fase\r\n        TelaInicial t = new TelaInicial( senhorq );\r\n        Fase1 f = new Fase1( senhorq );\r\n        Fase2 f2 = new Fase2( senhorq );\r\n        FaseChefao c = new FaseChefao( senhorq );\r\n        \r\n        //Recupera objeto motor\r\n        Motor motorJogo = MotorSingleton.pegaInstancia();\r\n        //Adiciona as fases existentes,\r\n        //todas implementando a interface Fase\r\n        motorJogo.adicionaFase(\"telaInicial\", t);\r\n        motorJogo.adicionaFase(\"fase1\", f);\r\n        motorJogo.adicionaFase(\"fase2\", f2);\r\n        motorJogo.adicionaFase(\"faseChefao\", c);\r\n```\r\n\r\n#### Executando\r\nPara executar o motor, basta informar a fase inicial e opcionalmente, o número de quadros por segundo.\r\n\r\n```java\r\nmotorJogo.defineFaseInicial(\"telaInicial\");\r\nmotorJogo.alteraQuadrosPorSegundo(50);\r\nmotorJogo.executa();\r\n```\r\n\r\n#### Troca de fases\r\n\r\nPara trocar de fase, basta executar o seguinte método, informando a chave da próxima fase:\r\n\r\n```java\r\nMotor motorJogo = MotorSingleton.pegaInstancia();\r\nmotorJogo.defineProximaFase(\"fase2\");\r\n```\r\n\r\n### Interface Fase\r\n\r\nA interface Fase contém três métodos que devem ser implementados: \r\n\r\n1) **processa**: Contém a lógica da fase;\r\n2) **desenha**: desenha os objetos da fase;\r\n3) **inicia**: Método executado sempre antes de de fazer o primeiro processamento da fase. Também é executado quando a fase é definida como \"próxima\".\r\n\r\n```java\r\npublic class MinhaFase implements Fase {\r\n    //...\r\n    public void inicia(){\r\n    \t//Garate que sempre que voltar para essa fase o jogador iniciará em X = 40\r\n        jogador.alteraX(40);\r\n    }\r\n    \r\n    public void processa(){\r\n        jogador.processa();\r\n        inimigo.processa();\r\n        \r\n        processaColisoes();\r\n        verificaVitoria();\r\n    }\r\n    \r\n    public void desenha(){\r\n    \tjogador.desenha();\r\n        inimigo.desenha();\r\n    }\r\n    //...\r\n}\r\n```\r\n\r\n### Classe abstrata ObjetoJogo\r\n\r\nEsta classe contém dois métodos abstratos, o **processa** para a lógica do objeto e o **desenha**. A classe estende a classe \"RetanguloGravidade\" e tem métodos para informar e recuperar se um objeto está \"vivo\" no jogo.\r\n\r\n```java\r\npublic class Tiro extends ObjetoJogo {\r\n    //...\r\n    public void processa(){\r\n    \tx += 1;\r\n    }\r\n    \r\n    public void desenha(){\r\n        Alj.cor.nome(\"preto\");\r\n        Alj.desenha.oval(x, y, largura, altura);\r\n    }\r\n    //...\r\n}\r\n```\r\n\r\n## Classes Extras\r\n\r\n### Contador Tempo\r\nEsta classe permite criar um contador de milissegundos.\r\n\r\n```java\r\n//Cria um objeto para contar o tempo a cada 2 segundos\r\nContadorTempo cont = new ContadorTempo(2000);\r\n\r\nif(cont.terminou()){\r\n\t//Faz alguma coisa e..\r\n    cont.reinicia();\r\n}\r\n```\r\n\r\n## Conclusão\r\n\r\nTodos os comandos e classes aqui apresnetados tem como mesmo objetivo, tornar a programação em java um pouco mais divertida e prazerosa para quem está começando.\r\n\r\nAssim, nossos primeiros programas podem ganhar um pouco mais de vida e dinamismo e o ensino fica melhor também para o professor que pode ir muito além do tradicional.\r\n\r\nE tudo isso, ainda usando Java, uma linguagem poderosa e profissional.\r\nEspero que gostem.\r\n\r\n### Inspiração e agradecimentos\r\n\r\nÀ criatividade e disposição dos meus alunos que tem encarado comigo o desafio de aprender programação de um modo que vale a pena, divertido, voltado para aproveitar o máximo do potencial criativo que o computador pode nos oferecer.\r\n\r\nAo SENAI São José e à Márcia Cristina (coordenadora) pela confiança e pelo excepcional trabalho como coordenadora do curso técnico de programação articulado com o ensino médio.\r\n\r\nAos projetos BlueJ, Greenfoot, idraw e Processing.\r\n\r\nAo orientador do meu TCC, professor Ricardo Pereira e Silva, UFSC e aos demais professores do curso de Sistemas de Informação que contribuíram para o meu aprendizado e desenvolvimento.\r\n\r\nPor fim, à minha amada família, Suélen e Kainan, simplesmente pelo que são.!\r\n\r\nLinhas apenas,\r\npara completar,\r\n1000 linhas no arquivo. até mais.","tagline":"Framework Java para Ensino de Orientação a Objetos usando jogos2D","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Aljava"}